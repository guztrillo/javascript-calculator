{"version":3,"sources":["components/Screen.js","components/Pad.js","App.js","reportWebVitals.js","index.js"],"names":["Screen","formula","input","id","Pad","numbers","operator","handleAC","handleDEL","handleDecimal","handleNegative","handleEqual","className","value","onClick","e","App","props","state","saved","negativeFlag","operatorFlag","equalKey","prevRes","arrSigns","handleNumber","bind","handleOperator","target","this","setState","test","length","slice","concat","search","includes","arithmetic","str","arrNums","match","arrOper","pop","i","operation","map","ele","parseFloat","acumulador","prevPart","previous","next","index","undefined","push","operationFunction","actualRes","nextPart","j","indexSum","result","prev","action","console","log","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75fb364c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Screen({formula,input}){\r\n     return (\r\n          <div id=\"screen\">\r\n               <div id=\"formula\">{formula}</div>\r\n               <div id=\"display\">{input}</div>\r\n          </div>\r\n     );\r\n}","import React from 'react';\r\n\r\nexport default function Pad ({numbers, operator, handleAC, handleDEL, handleDecimal, handleNegative, handleEqual}){\r\n     return(\r\n          <div id=\"pad\">\r\n               <button className=\"padkey numbers\" id=\"seven\" value=\"7\" onClick={numbers}>7</button>\r\n               <button className=\"padkey numbers\" id=\"eight\" value=\"8\" onClick={numbers}>8</button>\r\n               <button className=\"padkey numbers\" id=\"nine\" value=\"9\" onClick={numbers}>9</button>\r\n               <button className=\"padkey operator\" id=\"divide\" value=\"/\" onClick={operator}>รท</button>\r\n               <button className=\"padkey numbers\" id=\"four\" value=\"4\" onClick={numbers}>4</button>\r\n               <button className=\"padkey numbers\" id=\"five\" value=\"5\" onClick={numbers}>5</button>\r\n               <button className=\"padkey numbers\" id=\"six\" value=\"6\" onClick={numbers}>6</button>\r\n               <button className=\"padkey operator\" id=\"multiply\" value=\"*\" onClick={operator}>ร</button>\r\n               <button className=\"padkey numbers\" id=\"one\" value=\"1\" onClick={numbers}>1</button>\r\n               <button className=\"padkey numbers\" id=\"two\" value=\"2\" onClick={numbers}>2</button>\r\n               <button className=\"padkey numbers\" id=\"three\" value=\"3\" onClick={numbers}>3</button>\r\n               <button className=\"padkey operator\" id=\"subtract\" value=\"-\" onClick={(e) => {operator(e); handleNegative(e)}}>-</button>\r\n               <button className=\"padkey numbers\" id=\"zero\" value=\"0\" onClick={numbers}>0</button>\r\n               <button className=\"padkey operator\" id=\"add\" value=\"+\" onClick={operator}>+</button>\r\n               <button className=\"padkey operator\" id=\"clear\" value=\"AC\" onClick={handleAC}>AC</button>\r\n               <button className=\"padkey operator\" id='del' value=\"DEL\" onClick={handleDEL}>DEL</button>\r\n               <button className=\"padkey operator\" id=\"decimal\" value=\".\" onClick={handleDecimal}>.</button>\r\n               <button className=\"padkey operator\" id=\"equals\" value=\"=\" onClick={handleEqual}>=</button>\r\n          </div>\r\n     );\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Screen from './components/Screen';\nimport Pad from './components/Pad';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      formula: '',\n      input: '0',\n      saved: '',\n      negativeFlag: 0,\n      operatorFlag: false,\n      equalKey: 0,\n      prevRes: '',\n      arrSigns: []\n    }\n    this.handleNumber = this.handleNumber.bind(this)\n    this.handleOperator = this.handleOperator.bind(this)\n    this.handleAC = this.handleAC.bind(this)\n    this.handleDEL = this.handleDEL.bind(this)\n    this.handleNegative = this.handleNegative.bind(this)\n    this.handleDecimal = this.handleDecimal.bind(this)\n    this.handleEqual = this.handleEqual.bind(this)\n  }\n  handleNumber(e) {\n    const value = e.target.value;\n    const { input, formula, saved } = this.state\n    this.setState({\n      operatorFlag: false,\n      negativeFlag: 0,\n      equalKey: 0\n    })\n    if (!/[1-9.]/.test(input)) { // si el input estรก en 0, o sea, al iniciar, el texto del input es sustituido por la tecla; o al introducir algunos de los operadores'\n      this.setState({\n        input: value,\n        formula: saved.length === 0 ? value\n          : /[*+\\-/]$/.test(formula) ? formula + value\n          : value === '0' ? formula : formula.slice(0,-1) + value\n      })\n    } else { // en caso contrario, estรก introduciendo una serie de numeros, entonces el input se va anexando al valor anterior \n      if (this.state.prevRes !== '') { // cuando marco un numero y el resultado previo no estรก vacรญo, sustituye el input y memory por el nuevo numero\n        this.setState({\n          prevRes: '',\n          input: value,\n          formula: value\n        })\n      }\n      else {\n        this.setState({\n          input: input + value,\n          formula: formula + value,\n          saved: formula + value\n        })\n      }\n    }\n  }\n  handleOperator(e) {\n    const value = e.target.value;\n    const { formula, negativeFlag, arrSigns, prevRes } = this.state\n    if (/\\+|\\/|\\*/.test(value)) {\n      this.setState({\n        operatorFlag: true,\n        negativeFlag: 0,\n        equalKey: 0\n      })\n    }\n    if (value === '-') {\n      this.setState({\n        negativeFlag: negativeFlag + 1,\n        equalKey: 0\n      })\n    }\n    if (prevRes !== '') {\n      this.setState({\n        input: value,\n        formula: prevRes + value,\n        saved: prevRes + value,\n        prevRes: '',\n        arrSigns: arrSigns.concat(value)\n      })\n    }\n    else {\n      if (!/[*+\\-/]$/.test(formula)) { // si no encuentra ningun operador al final de la memoria, entonces aรฑade el operador al final\n        if (formula.length === 0 && /\\/|\\*/.test(value)) { // evita que se coloque un x o / al inicio\n          this.setState({\n            input: value,\n            formula: '',\n            saved: ''\n          })\n        } else {\n          this.setState({\n            input: value,\n            formula: formula + value,\n            saved: formula + value\n          })\n        }\n      }\n      else if (/[*+\\-/]$/.test(formula)) { // si lo encuentra y presiono otro operador, entonces corta lo que habรญa en la memoria y aรฑade el nuevo input\n        if (formula.length === 1 && /\\/|\\*/.test(value)) { // evita que se coloque un x o / al inicio\n          this.setState({\n            input: value,\n            formula: '',\n            saved: ''\n          })\n        }\n        else {\n          this.setState({\n            input: value,\n            formula: formula.slice(0, - 1) + value,\n            saved: formula.slice(0, - 1) + value\n          })\n        }\n        if (!/[0-9.]/.test(formula.slice(- 2, - 1)) && negativeFlag > 0 && formula.length > 1) {\n          // si el antepenultimo elemento no es un numero y presiono un nuevo operador, entonces se sustituyen los dos operadores consecutivos por el nuevo operador, exceptuando el negativo\n          this.setState({\n            input: value,\n            formula: value !== '-' ? formula.slice(0, - 2) + value : formula,\n            saved: value !== '-' ? formula.slice(0, - 2) + value : formula\n          })\n        }\n      }\n\n      if (formula.length > 0 && (arrSigns[arrSigns.length - 2] !== value || arrSigns[arrSigns.length - 1] !== value)) { // restringue no aรฑadir operadores repetidos al arreglo\n        this.setState({\n          arrSigns: arrSigns.concat(value)\n        })\n      }\n    }\n  }\n  handleDEL() {\n    const { formula, operatorFlag, input } = this.state\n    if (formula.length > 1 && !/=/.test(formula)) {\n      this.setState({\n        input: input.slice(0, -1),\n        formula: formula.slice(0, - 1),\n        operatorFlag: operatorFlag ? false : false\n      })\n    } else if (formula.length === 1) {\n      this.handleAC();\n    }\n  }\n  handleAC() {\n    this.setState({\n      formula: '',\n      input: '0',\n      saved: '',\n      negativeFlag: 0,\n      operatorFlag: false,\n      equalKey: 0,\n      prevRes: '',\n      arrSigns: []\n    })\n  }\n  handleNegative(e) {\n    const value = e.target.value;\n    const { formula, arrSigns, operatorFlag, negativeFlag } = this.state\n    if (/[0-9.]/.test(formula.slice(- 2, - 1)) && arrSigns.length > 0 && formula.length > 1) { // si el antepenultimo elemento es un numero y se presiona \n      if (operatorFlag) { // si el operador estรก activado, se aรฑade el nuevo signo negativo\n        this.setState({\n          input: value,\n          formula: formula.slice(0, - 1) + arrSigns[arrSigns.length - 1] + value\n        })\n      }\n      // else if (!operatorFlag && negativeFlag === 0) { // si el operador estรก en falso, y aรฑado un solo negativo\n      //   console.log('tambiรฉn entrรณ aquรญ')\n      //   this.setState({\n      //     input: value,\n      //     formula: formula.slice(0, - 1) + value\n      //   })\n      // } \n      else if (!operatorFlag && negativeFlag === 1) { // si aรฑado dos negativos\n        this.setState({\n          input: value,\n          formula: formula.slice(0, - 1) + arrSigns[arrSigns.length - 1] + value\n        })\n      } // se aรฑade el negativo luego del signo anterior.\n    }\n  }\n  handleDecimal() {\n    const { input, formula } = this.state\n    this.setState({\n      operatorFlag: false,\n      negativeFlag: 0,\n      equalKey: 0\n    })\n    if (input === '0' && formula === '') { // si no hay nada en la calculadora\n      this.setState({\n        input: input + '.',\n        formula: formula + '0.',\n      })\n    } else if (formula.slice(formula.length - 1).search(/\\+|-|\\/|\\*/) === 0) { // si encuntra un operador en el input y se clickea un punto decimal, entonces se sustituye por \"0.\"\n      this.setState({\n        input: '0.',\n        formula: formula + '0.'\n      })\n    } else if (!input.includes('.')) { // si el input ya incluye un punto entonces no puede agregar otro\n      this.setState({\n        input: input + '.',\n        formula: formula + '.'\n      })\n    }\n  }\n  handleEqual() {\n    const { formula, equalKey, prevRes } = this.state\n    this.setState({\n      equalKey: equalKey + 1\n    })\n    if (formula.length > 0 && !/[*+\\-/]$/.test(formula) && equalKey <1) {\n      this.setState({\n        prevRes: prevRes + this.arithmetic(this.state.formula),\n        input: this.arithmetic(this.state.formula),\n        formula: formula + '=' + this.arithmetic(this.state.formula)\n      })\n    }\n  }\n  arithmetic(str) {\n    const rgxAllNums = /([^+\\-/*])*/g // todos los numeros sin operadores positivos ni negativos\n    const rgxOperator = /([+\\-/*])/g // todos los operadores\n    let arrNums = str.match(rgxAllNums);\n    let arrOper = str.match(rgxOperator);\n    arrNums.pop();\n    let i = 0;\n    let operation = arrNums.map((ele) => {\n      if (ele.length !== 0) {\n        return parseFloat(ele);\n      } else {\n        let operator = arrOper[i];\n        i++;\n        return operator;\n      }\n    })\n    // Expression Logic:\n    let acumulador = [];\n    let prevPart = [];\n    // ciclo for para efectuar divisiรณn y multiplicaciรณn primero\n    for (let i = 0; i < operation.length; i++) {\n      if (typeof operation[i] === 'string') {\n        if (operation[i].search(/\\/|\\*/g) !== -1) {\n          let previous = operation[i - 1]; // tomo el elemento anterior\n          let next = operation[i + 1]; // y el siguiente\n          let index = i;\n          if (previous !== undefined) {\n            if (typeof next !== 'string') { // si no es un signo negativo\n              acumulador.push(this.operationFunction(previous, next, operation[i]));\n            } else { // si es un signo\n              next = operation[i + 2]; // incremento la posiciรณn del next en 1 para hallar el nรบmero\n              acumulador.push(this.operationFunction(previous, - next, operation[i]));\n              i++; // y sumo uno al ciclo del for\n            }\n          }\n          if (i - 1 < index) { // si no encontrรณ un negativo en el next, entonces serรกn index serรก mayor\n            prevPart = operation.slice(0, i - 1)\n          } else { // esto hace que recorte adecuadamente la porciรณn previa\n            prevPart = operation.slice(0, i - 2)\n          }\n          let actualRes = acumulador[acumulador.length - 1]\n          let nextPart;\n          if (i + 1 < operation.length) {\n            nextPart = operation.slice(i + 2, operation.length);\n          }\n          operation = prevPart;\n          operation.push(actualRes);\n          if (nextPart !== undefined) {\n            for (let j = 0; j < nextPart.length; j++) { // aรฑade el arreglo de nextpart uno por uno, si existe\n              operation.push(nextPart[j]);\n            }\n          }\n          i = 0; // si encontrรณ un * รณ / entonces vuelve a iniciar el contador a cero con la nueva longitud\n        }\n      }\n    }\n    let indexSum = 0;\n    let result = [];\n    // ciclo for para completar las operaciones de suma y resta\n    if (operation.length === 1) { // si la operacion solo tiene un elemento, significa que solo multiplicรณ/dividiรณ y lo devuelve\n      return operation[0];\n    } else if (operation.length !== 2) { // si el largo de los elementos es distinto que 2\n      for (let i = 0; i < operation.length; i++) {\n        if (typeof operation[i] === 'string') { // si consigo un signo\n          let previous = operation[i - 1]; // tomo el elemento anterior\n          let next = operation[i + 1]; // y el siguiente\n          if (previous !== undefined) {\n            if (typeof next !== 'string') { // si no es un signo negativo\n              if (result.length === 0) { // acumulo la operaciรณn\n                result.push(this.operationFunction(previous, next, operation[i]));\n              } else if (result.length > 0) { // cuando ya tengo un elemento en el result\n                result.push(this.operationFunction(result[indexSum], next, operation[i])); // utilizo ese elemento como previous e incremento para el siguiente caso\n                indexSum++;\n              }\n            }\n            else { // si es un signo\n              next = operation[i + 2]; // incremento la posiciรณn del next en 1 para hallar el nรบmero\n              if (result.length === 0) {\n                result.push(this.operationFunction(previous, - next, operation[i]));\n              } else if (result.length > 0) {\n                result.push(this.operationFunction(result[indexSum], - next, operation[i]));\n                indexSum++;\n              }\n              i++; // y sumo uno al ciclo del for\n            }\n          } else {\n            previous = operation[i + 1]\n            next = operation[i + 3]\n            if (operation[i] === '-') {\n              if (typeof next !== 'string') { // si no es un signo negativo\n                if (result.length === 0) { // acumulo la operaciรณn\n                  result.push(this.operationFunction(- previous, next, operation[i + 2]));\n                }\n              } else { // si es un signo\n                next = operation[i + 4]; // incremento la posiciรณn del next en 1 para hallar el nรบmero\n                if (result.length === 0) {\n                  result.push(this.operationFunction(- previous, - next, operation[i + 2]));\n                }\n                i++; // y sumo uno al ciclo del for\n              }\n              i += 2;\n            }\n          }\n        }\n      }\n    } else { // si es igual a 2, significa que solo es el signo del inicio y un numero\n      if (operation[0] === '+') {\n        result.push(this.operationFunction(1, operation[1], '*'));\n      }\n      else if (operation[0] === '-') {\n        result.push(this.operationFunction(-1, operation[1], '*'));\n      }\n    }\n    return result[result.length - 1];\n  }\n  operationFunction(prev, next, action) {\n    let result;\n    switch (action) {\n      case '+':\n        result = prev + next;\n        break\n      case '-':\n        result = prev - next;\n        break\n      case '*':\n        result = prev * next;\n        break\n      case '/':\n        result = prev / next;\n        break\n      default:\n        console.log('none');\n        break;\n    }\n    return result;\n  }\n  render() {\n    return (\n      <div id=\"container\">\n        <Screen formula={this.state.formula} input={this.state.input} />\n        <Pad numbers={this.handleNumber} operator={this.handleOperator} handleAC={this.handleAC} handleDEL={this.handleDEL} handleDecimal={this.handleDecimal} handleNegative={this.handleNegative} handleEqual={this.handleEqual} />\n      </div>\n    );\n  }\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}